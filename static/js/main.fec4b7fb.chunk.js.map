{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","latitude","setLat","useState","longitude","setLong","radius","setRad","download","setDownload","file","setFile","contacts","setContacts","mergeFiles","setMergeFiles","merge","setMerge","React","createElement","onSubmit","async","event","preventDefault","location","generatedPlacesPath","axios","post","data","concat","error","console","type","value","onChange","e","target","placeholder","onClick","handleDownload","link","document","href","setAttribute","body","appendChild","click","removeChild","Papa","parse","header","complete","preData","results","filter","row","nameData","typeData","i","length","placeName","typeName","push","log","generatedContactsPath","alert","accept","files","handleContactsDownload","firstParse","secondParse","Promise","all","map","resolve","reject","mergedList","place","hasContact","emptyRow","contact","mergedRow","mergedCsv","unparse","fields","blob","Blob","url","URL","createObjectURL","multiple","Array","from","handleMergeDownload","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.fec4b7fb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport Papa from 'papaparse';\n\nfunction App() {\n  const [latitude, setLat] = useState('')\n  const [longitude, setLong] = useState('')\n  const [radius, setRad] = useState('')\n  const [download, setDownload] = useState('')\n  const [file, setFile] = useState(null)\n  const[contacts, setContacts] = useState('')\n  const [mergeFiles, setMergeFiles] = useState([])\n  const [merge, setMerge] = useState('')\n  \n  const handleRequest = async (event) => {\n    event.preventDefault();\n    try {\n        const location = {latitude, longitude, radius}\n        const response = await axios.post('http://127.0.0.1:5000/api/generate_places', location)\n        const generatedPlacesPath = response.data.generatedPlacesPath;\n\n        setDownload(`http://127.0.0.1:5000/api/download_csv?filePath=${generatedPlacesPath}`)\n\n    } catch (error) {\n        console.error('Error processing data', error);\n    }\n  }\n\n  const handleDownload = () => {\n    const link = document.createElement('a');\n    link.href = download;\n    link.setAttribute('download', 'generated_places.csv');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  const handleContactsDownload = () => {\n    const link = document.createElement('a');\n    link.href = contacts;\n    link.setAttribute('download', 'generated_contacts.csv');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const handleMergeDownload = () => {\n    const link = document.createElement('a');\n    link.href = merge;\n    link.setAttribute('download', 'merged_file.csv')\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  const handleUpload = async (event) => {\n    event.preventDefault();\n\n    if (!file) {\n      alert('Select a file first');\n      return;\n    }\n\n    Papa.parse(file, {\n      header: false,\n      complete: async (results) => {\n        const preData = results.data.filter(row => row[0] && row[1]);\n\n        const nameData = [];\n        const typeData = [];\n\n        for (let i = 0; i < preData.length; i++) {\n          const placeName = preData[i][0];\n          const typeName = preData[i][1];\n          nameData.push(placeName);\n          typeData.push(typeName);\n        }\n\n        const data = [nameData, typeData];\n\n        console.log('Parsed data:', data);\n        \n        try {\n          const response = await axios.post('http://127.0.0.1:5000/api/scrape_contacts', {data});\n          const generatedContactsPath = response.data.generatedContactsPath;\n          setContacts(`http://127.0.0.1:5000/api/download_contacts_csv?filePath=${generatedContactsPath}`);\n        } catch (error) {\n          console.error('Error uploading file:', error);\n        }\n      },\n    });\n  }\n\n  const handleMergeUpload = async (event) => {\n    event.preventDefault();\n\n    if (mergeFiles.length < 2) {\n      alert('Select 2 files first');\n      return;\n    }\n\n    const parseFile = (file) => {\n      return new Promise((resolve, reject) => {\n        Papa.parse(file, {\n          header: false,\n          complete: (results) => resolve(results.data.filter(row => row[0])),\n          error: (error) => reject(error),\n        });\n      });\n    };\n\n    const [firstParse, secondParse] = await Promise.all(\n      mergeFiles.map(parseFile)\n    );\n\n    const data = [firstParse, secondParse];\n\n    console.log('Parsed data:', data);\n\n    const mergedList = [];\n    for (let place of data[1]) {\n      let hasContact = false;\n      const emptyRow = [...place];\n      for (let contact of data[0]) {\n        const mergedRow = [...place];\n        if (place[0] === contact[0]) {\n          hasContact = true;\n          mergedRow.push(contact[1]);\n          mergedRow.push(contact[2]);\n          mergedList.push(mergedRow);\n        }\n      } if (!hasContact) {\n        emptyRow.push('');\n        emptyRow.push('');\n        mergedList.push(emptyRow);\n      }\n    }\n\n    const headers = [\"Company Name\", \"Type\", \"Address\", \"Phone\", \"Website\", \"Wifi\", \"Contact\", \"Link\"];\n    const mergedCsv = Papa.unparse({ fields: headers, data: mergedList });\n\n    console.log('Merged CSV Content:', mergedCsv);\n\n    const blob = new Blob([mergedCsv], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n  \n    // Set the URL as the href for the download\n    setMerge(url);\n  }\n\n  const handleFileUpdate = async (event) => {\n    setFile(event.target.files[0]);\n  }\n\n  const handleMergeUpdate = async (event) => {\n    setMergeFiles(Array.from(event.target.files));\n  }\n\n  return (\n    <div>\n      <h1>Lead Generator Tool</h1>\n      <h3>Generate Places</h3>\n    <form onSubmit={handleRequest}>\n        <input\n            type=\"number\"\n            value={latitude}\n            onChange={(e) => setLat(e.target.value)}\n            placeholder=\"Enter latitude\"\n        />\n        <input\n            type=\"number\"\n            value={longitude}\n            onChange={(e) => setLong(e.target.value)}\n            placeholder=\"Enter longitude\"\n        />\n        <input\n            type=\"number\"\n            value={radius}\n            onChange={(e) => setRad(e.target.value)}\n            placeholder=\"Enter radius (meters)\"\n        />\n        <button type=\"submit\">Submit</button>\n    </form>\n    {download && (\n    <div>\n        <button onClick={handleDownload}> Download </button>\n    </div> )\n    }\n    <h3>Generate Contacts</h3>\n    <form onSubmit={handleUpload}>\n      <input type=\"file\" accept=\".csv\" onChange={handleFileUpdate}/>\n      <button type=\"submit\">Upload</button> \n    </form>\n    {contacts && (\n    <div>\n        <button onClick={handleContactsDownload}> Download </button>\n    </div> )\n    }\n    <h3>Merge Files</h3>\n    <form onSubmit={handleMergeUpload}>\n      <input type=\"file\" multiple accept=\".csv\" onChange={handleMergeUpdate}/>\n      <button type=\"submit\">Upload</button>\n    </form>\n    {merge && (\n      <div>\n        <button onClick={handleMergeDownload}> Download </button>\n      </div> )\n    }\n    </div>\n);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}